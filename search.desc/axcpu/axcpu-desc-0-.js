searchState.loadedDescShard("axcpu", 0, "axcpu\nExtended state of a task, such as FP/SIMD states.\nA 512-byte memory region for the FXSAVE/FXRSTOR …\nA wrapper of the Global Descriptor Table (GDT) with …\nA wrapper of the Interrupt Descriptor Table (IDT).\nKernel code segment for 32-bit mode.\nKernel code segment for 64-bit mode.\nKernel data segment.\nTSS segment.\nSaved hardware states of a task.\nIn 64-bit mode the TSS holds information that is not …\nSaved registers when a trap (interrupt or exception) …\nUser code segment for 32-bit mode.\nUser code segment for 64-bit mode.\nUser data segment.\nGets the 0th syscall argument.\nGets the 1st syscall argument.\nGets the 2nd syscall argument.\nGets the 3rd syscall argument.\nGets the 4th syscall argument.\nGets the 5th syscall argument.\nWrapper functions for assembly instructions.\nThe <code>CR3</code> register value, i.e., the page table root.\nExtended states, i.e., FP/SIMD states.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThread Local Storage (TLS).\nMemory region for the FXSAVE/FXRSTOR instruction.\nThe <code>gs_base</code> register value.\nHelper functions to initialize the CPU states on systems …\nInitializes the context for a new task, with the given …\nThe full 64-bit canonical forms of the interrupt stack …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe 16-bit offset to the I/O permission bit map from the …\nWhether the trap is from userspace.\nThe kernel stack top of the task.\nLoads the GDT into the CPU (executes the <code>lgdt</code> …\nLoads the IDT into the CPU (executes the <code>lidt</code> instruction).\nLoads the TSS into the CPU (executes the <code>ltr</code> instruction).\nConstructs a new GDT struct that filled with the default …\nConstructs a new IDT struct that filled with entries from …\nCreates a dummy context for a new task.\nCreates a new TSS with zeroed privilege and interrupt …\nReturns the GDT pointer (base and limit) that can be used …\nReturns the IDT pointer (base and limit) that can be used …\nThe full 64-bit canonical forms of the stack pointers …\n<code>RSP</code> after all callee-saved registers are pushed.\nChanges the page table root in this context.\nSwitches to another task.\nTrap handling.\nStructures and functions for user space.\nMakes the current CPU to ignore interrupts.\nAllows the current CPU to respond to interrupts.\nFlushes the TLB.\nHalt the current CPU.\nReturns whether the current CPU is allowed to respond to …\nReads the current page table root register for kernel …\nReads the thread pointer of the current CPU (<code>FS_BASE</code>).\nReads the current page table root register for user space (…\nRelaxes the current CPU and waits for interrupts.\nWrites the register to update the current page table root …\nWrites the thread pointer of the current CPU (<code>FS_BASE</code>).\nWrites the register to update the current page table root …\nInitializes the per-CPU TSS and GDT structures and loads …\nInitializes the global IDT and loads it into the current …\nInitializes syscall support and setups the syscall handler.\nInitializes trap handling on the current CPU.\nThe memory is device memory.\nThe memory is executable.\nA slice of IRQ handler functions.\nA slice of page fault handler functions.\nGeneric page table entry flags that indicate the …\nThe memory is readable.\nA slice of syscall handler functions.\nThe memory is uncached.\nThe memory is user accessible.\nThe memory is writable.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nContext to enter user space.\nCreates an empty context with all registers set to zero.\nEnters user space.\nReturns the argument unchanged.\nCreates a new context from the given <code>TrapFrame</code>.\nGets the instruction pointer.\nGets the stack pointer.\nCalls <code>U::from(self)</code>.\nCreates a new context with the given entry point, user …\nSets the instruction pointer.\nSets the return value register.\nSets the stack pointer.")